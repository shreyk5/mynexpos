// get the pid of current running process

multipush(BP);
backup;
R1 = ACQUIRE_SCHED_LOCK;
call ACCESS_CONTROL;
restore;

alias curr_pid R0;

curr_pid = [SYSTEM_STATUS_TABLE + 5*CORE + 1];

//save the values of ptbr,ptlr etc into the process table
[PROCESS_TABLE + curr_pid*16 + 14] = PTBR;
[PROCESS_TABLE + curr_pid*16 + 15] = PTLR;
[PROCESS_TABLE + curr_pid*16 + 12] = SP%512;

alias new_pid R1;
new_pid = 0;	//by default IDLE process

alias i R2;
i = (curr_pid + 1);

if(CORE == PRIMARY_CORE) then

	if([SYSTEM_STATUS_TABLE + 5] != 0) then	//swapping is going on
		alias daemon_protable R3;
		daemon_protable = PROCESS_TABLE + 15*16;

		if(([daemon_protable + 4] == READY) || ([daemon_protable + 4] == CREATED) || ([daemon_protable + 4] == RUNNING)) then
			new_pid = 15;
			//print "waitdaemon";
		else
			new_pid = 0;
		endif;
	
	else
		if([SYSTEM_STATUS_TABLE + 7] == 1 && [SYSTEM_STATUS_TABLE + 6] != IDLE2_PROCESS) then	//logout status is 1 and secondary core is not running idle2
			new_pid = 0;
		
		else
			while(i<14) do    //do not schedule IDLE2,daemon process and process running on sec core in this case
				alias protable R3;
				protable = PROCESS_TABLE + i*16;
				if((([protable + 4] == READY) || ([protable + 4] == CREATED)) && ([protable + 6] != 1) && [SYSTEM_STATUS_TABLE + 6] != i) then
					new_pid = i;
					break;
				endif;
				i = i + 1;
			endwhile;
		endif;

	endif;

else
	curr_pid = [SYSTEM_STATUS_TABLE + 6];
 	i = (curr_pid + 1)%15 + 3;
	new_pid = IDLE2_PROCESS;

	if([SYSTEM_STATUS_TABLE + 5] != 0 || [SYSTEM_STATUS_TABLE + 7] == 1) then
		new_pid = IDLE2_PROCESS;
	else
		while(i<=14 && i>=3) do    //do not schedule IDLE,init,shell,daemon
				alias protable R3;
				protable = PROCESS_TABLE + i*16;
				if((([protable + 4] == READY) || ([protable + 4] == CREATED)) && ([protable + 6] != 1) && [SYSTEM_STATUS_TABLE + 1] != i) then
					new_pid = i;
					break;
				endif;
				i = i + 1;
			endwhile;
	endif;
endif;

// print "core";
// print CORE;
//print new_pid;

breakpoint;

//change the SP to kernel stack of new process
SP = [PROCESS_TABLE + 16*new_pid + 11]*512 + [PROCESS_TABLE + 16*new_pid + 12]; 
PTBR = [PROCESS_TABLE + 16*new_pid + 14];
PTLR = [PROCESS_TABLE + 16*new_pid + 15];

[SYSTEM_STATUS_TABLE + 5*CORE + 1] = new_pid;

if([PROCESS_TABLE + new_pid*16 + 4] == CREATED) then
	BP = [[PROCESS_TABLE + new_pid*16 + 11] * 512];
	[PROCESS_TABLE + new_pid*16 + 4] = RUNNING;

	//print "sched";
	backup;
	R1 = RELEASE_LOCK;
	R2 = SCHED_LOCK;
	call ACCESS_CONTROL;
	restore;

	//print "out";
	//print CORE;

	[PROCESS_TABLE + new_pid*16 + 9] = 0;
	SP = [PROCESS_TABLE + new_pid*16 + 13];
	ireturn;
endif;

[PROCESS_TABLE+new_pid*16+4] = RUNNING;

multipop(BP);
//print "sched";
//print CORE;
backup;
R1 = RELEASE_LOCK;
R2 = SCHED_LOCK;
call ACCESS_CONTROL;
restore;

//print "out";
//print CORE;

return;

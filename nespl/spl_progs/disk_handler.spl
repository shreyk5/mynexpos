// save the UPTR and change to kernel stack of running process
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE + 5*CORE + 1]*16+13] = SP;
SP = [PROCESS_TABLE+[SYSTEM_STATUS_TABLE + 5*CORE + 1]*16+11]*512-1;

backup;
R1 = ACQUIRE_KERN_LOCK;
call ACCESS_CONTROL;
restore;

backup;		//save user context

[DISK_STATUS_TABLE] = 0;

//change the states of processes waiting for disk to be READY
//there is no release disk function therefore interrupt handler does this task
alias i R0;
i = 0;

while(i<16) do
	if([PROCESS_TABLE+i*16+4] == WAIT_DISK) then
		[PROCESS_TABLE+i*16+4] = READY;
	endif;
	i = i + 1;
endwhile;

restore;

backup;
R1 = RELEASE_LOCK;
R2 = KERN_LOCK;
call ACCESS_CONTROL;
restore;

SP = [PROCESS_TABLE+[SYSTEM_STATUS_TABLE + 5*CORE + 1]*16+13];
ireturn;
